{"version":3,"sources":["components/views/Search.tsx"],"names":["Search","useState","timestamp","setTimestamp","limit","setLimit","items","setItems","push","useHistory","useEffect","a","date","Date","Number","timePayload","Math","round","getTime","undefined","limitPayload","api","method","data","status","searchResponseItems","doSearch","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","length","map","id","username","itemTime","content","time","key","style","cursor","onClick","toString"],"mappings":"mLA8HeA,UAtHU,WAAO,IAAD,EACOC,mBAAiB,IADxB,mBACpBC,EADoB,KACTC,EADS,OAEDF,mBAAiB,GAFhB,mBAEpBG,EAFoB,KAEbC,EAFa,OAGDJ,mBAAiB,IAHhB,mBAGpBK,EAHoB,KAGbC,EAHa,KAInBC,EAASC,cAATD,KAsFR,OApCAE,qBAAU,YACQ,uCAAG,wCAAAC,EAAA,sEAEHC,EAAO,IAAIC,KAAKC,OAAOZ,IACvBa,EAAcb,EACdc,KAAKC,MAAML,EAAKM,gBAChBC,EACAC,EAAehB,QAASe,EANrB,SAWGE,YACR,UACA,CACIC,OAAQ,OACRC,KAAM,CACFrB,UAAWa,EACXX,MAAOgB,KAjBV,oBAQDG,KACJC,EATK,EASLA,OACOC,EAVF,EAULnB,MAYW,OAAXkB,GACIlB,GACAC,EAASkB,GAxBR,4GAAH,qDAgCdC,KACD,CAACxB,EAAWE,IAGX,0BACIuB,SA9Ea,SAACC,GAClBA,EAAMC,mBA+EF,2BACIC,KAAK,SACLC,YAAY,yBACZC,MAAQ9B,EACR+B,SA5Fc,SAACL,GACvBzB,EAAayB,EAAMM,OAAOF,UA6FtB,2BACIF,KAAK,SACLE,MAAQ5B,EACR6B,SA7FU,SAACL,GACnBvB,EAASS,OAAOc,EAAMM,OAAOF,WA8FzB,6BACuB,IAAjB1B,EAAM6B,OAEA,2CA1FM7B,EAAM8B,KAAI,YAK7B,IAJHC,EAIE,EAJFA,GACAC,EAGE,EAHFA,SACWC,EAET,EAFFrC,UACAsC,EACE,EADFA,QAEMC,EAAO,IAAI5B,KAAgB,IAAX0B,GAMtB,OACI,yBACIG,IAAG,UAAML,GACTM,MAAQ,CACJC,OAAQ,WAEZC,QAVY,WAChBrC,EAAK,UAAD,OAAW6B,MAWX,4BACMC,GAEN,2BACME,GAEN,6BACMD,GAEN,6BACME,EAAKK","file":"static/js/3.5f7710a7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { SearchAPIResponse } from \"../../models/api\";\nimport { Item } from \"../../models/data\";\n\nimport { api } from \"../../utils/api\";\n\nconst Search: React.FC = () => {\n    const [timestamp, setTimestamp] = useState<string>(\"\");\n    const [limit, setLimit] = useState<number>(5);\n    const [items, setItems] = useState<Item[]>([]);\n    const { push } = useHistory();\n\n    const onTimestampChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTimestamp(event.target.value);\n    };\n\n    const onLimitChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setLimit(Number(event.target.value));\n    };\n\n    const onFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n    };\n\n    const renderItems = () => items.map(({\n        id,\n        username,\n        timestamp: itemTime,\n        content\n    }) => {\n        const time = new Date(itemTime * 1000);\n\n        const onItemClick = () => {\n            push(`/tweet/${id}`);\n        };\n\n        return (\n            <div\n                key={ `${id}` }\n                style={ {\n                    cursor: \"pointer\"\n                } }\n                onClick={ onItemClick }\n            >\n                <h3>\n                    { username }\n                </h3>\n                <p>\n                    { content }\n                </p>\n                <div>\n                    { itemTime }\n                </div>\n                <div>\n                    { time.toString() }\n                </div>\n            </div>\n        );\n    });\n\n    useEffect(() => {\n        const doSearch = async () => {\n            try {\n                const date = new Date(Number(timestamp));\n                const timePayload = timestamp\n                    ? Math.round(date.getTime())\n                    : undefined;\n                const limitPayload = limit || undefined;\n\n                const { data: {\n                    status,\n                    items: searchResponseItems\n                } } = await api<SearchAPIResponse>(\n                    \"/search\",\n                    {\n                        method: \"POST\",\n                        data: {\n                            timestamp: timePayload,\n                            limit: limitPayload\n                        }\n                    }\n                );\n\n                if (status === \"OK\") {\n                    if (items) {\n                        setItems(searchResponseItems);\n                    }\n                }\n            } catch (e) {\n                // Query failed\n            }\n        };\n\n        doSearch();\n    }, [timestamp, limit]);\n\n    return (\n        <form\n            onSubmit={ onFormSubmit }\n        >\n            <input\n                type=\"number\"\n                placeholder=\"Timestamp (in seconds)\"\n                value={ timestamp }\n                onChange={ onTimestampChange }\n            />\n            <input\n                type=\"number\"\n                value={ limit }\n                onChange={ onLimitChange }\n            />\n            <div>\n                { items.length === 0\n                    ? (\n                        <h2>\n                            No results!\n                        </h2>\n                    )\n                    : renderItems() }\n            </div>\n        </form>\n    );\n};\n\nexport default Search;\n"],"sourceRoot":""}