{"version":3,"sources":["components/StorageProvider.tsx","components/UserProvider.tsx","components/views/NotFound.tsx","components/ChirpRouter.tsx","components/LoadingFallback.tsx","components/hooks/useUser.ts","components/views/TweetHome.tsx","components/views/Register.tsx","components/views/Login.tsx","components/views/Logout.tsx","components/views/Verify.tsx","components/auth/RequireAuthentication.tsx","components/auth/withRequireAuthentication.tsx","routes/chirp.ts","components/views/Home.tsx","App.tsx","index.tsx","utils/api.ts"],"names":["StorageContext","React","createContext","token","setToken","StorageProvider","children","initialToken","localStorage","getItem","useState","value","useEffect","setItem","removeItem","Provider","UserContext","done","authenticated","invalidate","UserProvider","setDone","authed","setAuthed","useContext","providerValue","a","api","headers","Authorization","status","data","ping","NotFound","ChirpRouter","routes","map","toRender","to","exact","Component","component","render","key","path","LoadingFallback","useUser","user","TweetHome","error","setError","content","setContent","itemID","setItemID","addTweet","method","id","onSubmit","event","preventDefault","placeholder","onChange","target","type","Register","name","setName","email","setEmail","password","setPassword","passwordConfirm","setPasswordConfirm","doSubmit","username","console","log","createOnChange","setter","Login","setErrorMessage","setNameError","setPasswordError","doSignIn","params","errorSetter","proceed","length","Logout","Verify","verified","setVerified","code","setCode","required","RequireAuthentication","loading","not","redirectTo","withRequireAuthentication","redirect","WithRequireAuth","props","componentName","displayName","chirpRoutes","lazy","App","Suspense","fallback","ReactDOM","document","getElementById","endpoint","options","secure","HOST","process","protocol","axios","request","url"],"mappings":"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","file":"static/js/main.e3676d30.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport interface StorageContextShape {\n    token: string | null;\n    setToken: (nextToken: string | null) => void | null;\n}\n\nexport const StorageContext = React.createContext<StorageContextShape>({\n    token: null,\n    setToken: () => null\n});\n\nconst StorageProvider: React.FC = ({ children }) => {\n    const initialToken = localStorage.getItem(\"token\");\n\n    const [token, setToken] = useState<string | null>(\n        initialToken || null\n    );\n\n    const value: StorageContextShape = {\n        token,\n        setToken\n    };\n\n    useEffect(() => {\n        if (token) {\n            localStorage.setItem(\"token\", token);\n        } else {\n            localStorage.removeItem(\"token\");\n        }\n    }, [token]);\n\n    return (\n        <StorageContext.Provider\n            value={ value }\n        >\n            { children }\n        </StorageContext.Provider>\n    );\n};\n\nexport default StorageProvider;\n","import React, { useState, useEffect, useContext } from \"react\";\n\nimport { StorageContext } from \"./StorageProvider\";\n\nimport { UserAPIResponse } from \"../models/api\";\n\nimport { api } from \"../utils/api\";\n\nexport interface UserContextShape {\n    done: boolean;\n    authenticated: boolean;\n    name?: string;\n    invalidate: () => void;\n}\n\nexport const UserContext = React.createContext<UserContextShape>({\n    done: false,\n    authenticated: false,\n    invalidate: () => {\n        // Noop\n    }\n});\n\nconst UserProvider: React.FC = ({\n    children\n}) => {\n    const [done, setDone] = useState<boolean>(false);\n    const [authed, setAuthed] = useState<boolean>(false);\n\n    const { token, setToken } = useContext(StorageContext);\n\n    const invalidate = () => {\n        setAuthed(false);\n        setToken(null);\n    };\n\n    const providerValue: UserContextShape = {\n        done,\n        authenticated: authed,\n        invalidate\n    };\n\n    useEffect(() => {\n        if (authed) {\n            return;\n        }\n\n        const ping = async () => {\n            try {\n                if (token) {\n                    const {\n                        data: {\n                            status\n                        }\n                    } = await api<UserAPIResponse>(\n                        \"/user\",\n                        {\n                            headers: {\n                                Authorization: `Bearer ${token}`\n                            }\n                        }\n                    );\n\n                    if (status === \"OK\") {\n                        setAuthed(true);\n                    } else {\n                        setAuthed(false);\n                    }\n                }\n            } catch (e) {\n                setAuthed(false);\n            } finally {\n                setDone(true);\n            }\n        };\n\n        ping();\n    }, [authed, token]);\n\n    return (\n        <UserContext.Provider\n            value={ providerValue }\n        >\n            { children }\n        </UserContext.Provider>\n    );\n};\n\nexport default UserProvider;\n","import React from \"react\";\n\nconst NotFound: React.FC = () => {\n    return (\n        <div>\n            <h1>\n                Not found!\n            </h1>\n        </div>\n    );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport { Switch, Route as Goto, RouteComponentProps } from \"react-router-dom\";\n\nimport { Route } from \"../models/router\";\n\nimport NotFound from \"./views/NotFound\";\n\ninterface ChirpRouterProps {\n    routes: Route[];\n}\n\nconst ChirpRouter: React.FC<ChirpRouterProps> = ({\n    routes\n}) => {\n    return (\n        <Switch>\n            { routes.map(({\n                to, exact, component: Component, render\n            }) => {\n                let toRender: ((props: RouteComponentProps) => React.ReactNode) | (() => null);\n\n                if (Component) {\n                    toRender = () => (\n                        <Component />\n                    );\n                } else if (render) {\n                    toRender = render;\n                } else {\n                    toRender = () => null;\n                }\n\n                return (\n                    <Goto\n                        key={ to }\n                        path={ to }\n                        exact={ exact }\n                        render={ toRender }\n                    />\n                );\n            }) }\n            <Goto\n                component={ NotFound }\n            />\n        </Switch>\n    );\n};\n\nexport default ChirpRouter;\n","import React from \"react\";\n\nconst LoadingFallback: React.FC = () => (\n    <div>\n        Loading...\n    </div>\n);\n\nexport default LoadingFallback;\n","import { useContext } from \"react\";\n\nimport { StorageContext } from \"../StorageProvider\";\nimport { UserContext } from \"../UserProvider\";\n\nconst useUser = () => {\n    const { token } = useContext(StorageContext);\n    const user = useContext(UserContext);\n\n    return {\n        token,\n        user\n    };\n};\n\nexport default useUser;\n","import React, { useState } from \"react\";\n\nimport { InsertItemAPIResponse } from \"../../models/api\";\n\nimport useUser from \"../hooks/useUser\";\n\nimport { api } from \"../../utils/api\";\nimport { Link } from \"react-router-dom\";\n\nconst TweetHome: React.FC = () => {\n    const [error, setError] = useState<boolean>(false);\n    const [content, setContent] = useState<string>(\"\");\n    const [itemID, setItemID] = useState<string | null>(null);\n    const {\n        token\n    } = useUser();\n\n    const addTweet = async () => {\n        if (!content) {\n            setError(true);\n\n            return;\n        }\n\n        // Child type not implemented yet\n\n        try {\n            const { data: {\n                status,\n                id\n            } } = await api<InsertItemAPIResponse>(\n                \"/additem\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        Authorization: `Bearer ${token}`\n                    },\n                    data: {\n                        content\n                    }\n                }\n            );\n\n            if (status === \"OK\") {\n                setItemID(id);\n            }\n        } catch (e) {\n            setError(true);\n        }\n    };\n\n    const onContentChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setError(false);\n        setContent(event.target.value);\n    };\n\n    const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (content) {\n            addTweet();\n        } else {\n            setError(true);\n        }\n    };\n\n    return (\n        <form\n            onSubmit={ onSubmit }\n        >\n            <h1>\n                New tweet\n            </h1>\n            { itemID && (\n                <div>\n                    <Link\n                        to={ `/tweet/${itemID}` }\n                    >\n                        View new tweet\n                    </Link>\n                </div>\n            ) }\n            { error && (\n                <div>\n                    Some error ocurred!\n                </div>\n            ) }\n            <textarea\n                placeholder=\"What's going on?\"\n                value={ content }\n                onChange={ onContentChange }\n            />\n            <button\n                type=\"submit\"\n            >\n                Tweet\n            </button>\n            <Link\n                to=\"/search\"\n            >\n                Search tweets\n            </Link>\n            <Link\n                to=\"/signout\"\n            >\n                Sign out\n            </Link>\n        </form>\n    );\n};\n\nexport default TweetHome;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { api } from \"../../utils/api\";\n\nconst Register = () => {\n    const [done, setDone] = useState<boolean>(false);\n    const [error, setError] = useState<boolean>(false);\n    const [name, setName] = useState<string>(\"\");\n    const [email, setEmail] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n    const [passwordConfirm, setPasswordConfirm] = useState<string>(\"\");\n\n    const doSubmit = async () => {\n        if (!name || !email || !password || !passwordConfirm) {\n            setError(true);\n\n            return;\n        }\n\n        if (password !== passwordConfirm) {\n            setError(true);\n\n            return;\n        }\n\n        try {\n            const { data: {\n                status\n            } } = await api(\n                \"/adduser\",\n                {\n                    method: \"POST\",\n                    data: {\n                        username: name,\n                        email,\n                        password\n                    }\n                }\n            );\n\n            if (status === \"OK\") {\n                setDone(true);\n            }\n        } catch (e) {\n            console.log(e);\n\n            setError(true);\n        }\n    };\n\n    const createOnChange = (setter: (next: string) => void) => (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setter(event.target.value);\n    };\n\n    const onFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        doSubmit();\n    };\n\n    return (\n        <form\n            onSubmit={ onFormSubmit }\n        >\n            { error && (\n                <div>\n                    Please check your information!\n                </div>\n            ) }\n            { done && (\n                <div>\n                    <span>\n                        Good news! You've signed up. Just verify your email and you're all set!\n                    </span>\n                    <Link\n                        to=\"/code\"\n                    >\n                        Verify here.\n                    </Link>\n                </div>\n            ) }\n            <input\n                type=\"text\"\n                placeholder=\"Username\"\n                value={ name }\n                onChange={ createOnChange(setName) }\n            />\n            <input\n                type=\"email\"\n                placeholder=\"Email\"\n                value={ email }\n                onChange={ createOnChange(setEmail) }\n            />\n            <input\n                type=\"password\"\n                placeholder=\"Password\"\n                value={ password }\n                onChange={ createOnChange(setPassword) }\n            />\n            <input\n                type=\"password\"\n                placeholder=\"Password again\"\n                value={ passwordConfirm }\n                onChange={ createOnChange(setPasswordConfirm) }\n            />\n            <button>\n                Sign up\n            </button>\n        </form>\n    );\n};\n\nexport default Register;\n","import React, { useState, useContext } from \"react\";\n\nimport { LoginAPIResponse } from \"../../models/api\";\n\nimport { StorageContext } from \"../StorageProvider\";\n\nimport { api } from \"../../utils/api\";\n\nconst Login: React.FC = () => {\n    const [errorMessage, setErrorMessage] = useState<string | null>();\n    const [nameError, setNameError] = useState<boolean>(false);\n    const [passwordError, setPasswordError] = useState<boolean>();\n    const [name, setName] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n\n    const { setToken } = useContext(StorageContext);\n\n    const doSignIn = async () => {\n        try {\n            const { data: {\n                status,\n                token\n            } } = await api<LoginAPIResponse>(\n                \"/login\",\n                {\n                    method: \"POST\",\n                    params: {\n                        token: true\n                    },\n                    data: {\n                        username: name,\n                        password\n                    }\n                }\n            );\n\n            if (status === \"OK\" && token) {\n                setToken(token);\n            } else {\n                setErrorMessage(\"Failed to login!\");\n            }\n        } catch (e) {\n            setErrorMessage(\"Failed!\");\n        }\n    };\n\n    const createOnChange = (\n        setter: (next: string) => void,\n        errorSetter: (next: boolean) => void\n    ) => (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setter(event.target.value);\n        errorSetter(false);\n    };\n\n    const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        let proceed = true;\n\n        if (name.length < 1) {\n            proceed = false;\n            setNameError(true);\n        }\n\n        if (password.length < 1) {\n            proceed = false;\n            setPasswordError(true);\n        }\n\n        if (proceed) {\n            doSignIn();\n        }\n    };\n\n    return (\n        <form\n            onSubmit={ onSubmit }\n        >\n            <input\n                type=\"text\"\n                value={ name }\n                onChange={ createOnChange(setName, setNameError) }\n            />\n            <input\n                type=\"password\"\n                value={ password }\n                onChange={ createOnChange(setPassword, setPasswordError) }\n            />\n            <button\n                type=\"submit\"\n            >\n                Sign in\n            </button>\n        </form>\n    );\n};\n\nexport default Login;\n","import React, { useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { StorageContext } from \"../StorageProvider\";\n\nimport useUser from \"../hooks/useUser\";\n\nconst Logout: React.FC = () => {\n    const {\n        user: {\n            invalidate\n        }\n    } = useUser();\n\n    invalidate();\n\n    return (\n        <Redirect\n            to=\"/signin\"\n        />\n    );\n};\n\nexport default Logout;\n","import React, { useState } from \"react\";\n\nimport { api } from \"../../utils/api\";\nimport { Link } from \"react-router-dom\";\n\nconst Verify: React.FC = () => {\n    const [error, setError] = useState<boolean>(false);\n    const [verified, setVerified] = useState<boolean>(false);\n    const [email, setEmail] = useState<string>(\"\");\n    const [code, setCode] = useState<string>(\"\");\n\n    const doSubmit = async () => {\n        try {\n            const { data: {\n                status\n            } } = await api(\n                \"/verify\",\n                {\n                    method: \"POST\",\n                    data: {\n                        email,\n                        key: code\n                    }\n                }\n            );\n\n            if (status === \"OK\") {\n                setVerified(true);\n            }\n        } catch (e) {\n            setError(true);\n        }\n    };\n\n    const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        doSubmit();\n    };\n\n    const onEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(event.target.value);\n    };\n\n    const onCodeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCode(event.target.value);\n    };\n\n    return (\n        <form\n            onSubmit={ onSubmit }\n        >\n            { error && (\n                <div>\n                    Credentials incorrect!\n                </div>\n            ) }\n            { verified && (\n                <div>\n                    <span>\n                        You've been verified!\n                    </span>\n                    <Link\n                        to=\"/signin\"\n                    >\n                        Sign in!\n                    </Link>\n                </div>\n            ) }\n            <input\n                required\n                type=\"email\"\n                placeholder=\"Email\"\n                value={ email }\n                onChange={ onEmailChange }\n            />\n            <input\n                required\n                type=\"text\"\n                placeholder=\"Verification code\"\n                value={ code }\n                onChange={ onCodeChange }\n            />\n            <button\n                type=\"submit\"\n            >\n                Verify\n            </button>\n        </form>\n    );\n};\n\nexport default Verify;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport useUser from \"../hooks/useUser\";\n\ninterface RequireAuthenticationProps {\n    not?: boolean;\n    loading?: React.ReactNode;\n    redirectTo: string;\n}\n\nconst RequireAuthentication: React.FC<RequireAuthenticationProps> = ({\n    children,\n    loading,\n    not,\n    redirectTo\n}) => {\n    const {\n        user: {\n            done,\n            authenticated\n        }\n    } = useUser();\n\n    if (!done) {\n        return (\n            <>\n                { loading || null }\n            </>\n        );\n    }\n\n    const condition = not\n        ? done && !authenticated\n        : done && authenticated;\n\n    if (condition) {\n        return (\n            <>\n                { children }\n            </>\n        );\n    }\n\n    return (\n        <Redirect\n            to={ redirectTo }\n        />\n    );\n};\n\nexport default RequireAuthentication;\n","import React from \"react\";\n\nimport RequireAuthentication from \"./RequireAuthentication\";\n\nconst withRequireAuthentication = (not?: boolean, to?: string) => (Component: React.FC) => {\n    const redirect = to || \"/\";\n\n    const WithRequireAuth: React.FC = (props) => (\n        <RequireAuthentication\n            not={ not }\n            redirectTo={ redirect }\n        >\n            <Component\n                { ...props }\n            />\n        </RequireAuthentication>\n    );\n\n    const componentName = Component.name\n        || Component.displayName\n        || \"Component\";\n\n    WithRequireAuth.displayName = `requireAuthentication(${componentName})`;\n\n    return WithRequireAuth;\n};\n\nexport default withRequireAuthentication;\n","import React from \"react\";\n\nimport { Route } from \"../models/router\";\n\nimport Home from \"../components/views/Home\";\nimport Register from \"../components/views/Register\";\nimport NotFound from \"../components/views/NotFound\";\nimport Login from \"../components/views/Login\";\nimport Logout from \"../components/views/Logout\";\nimport Verify from \"../components/views/Verify\";\nimport withRequireAuthentication from \"../components/auth/withRequireAuthentication\";\n\nconst chirpRoutes: Route[] = [\n    {\n        to: \"/\",\n        exact: true,\n        component: Home\n    },\n    {\n        to: \"/signin\",\n        exact: true,\n        component: withRequireAuthentication(true)(Login)\n    },\n    {\n        to: \"/signup\",\n        exact: true,\n        component: withRequireAuthentication(true)(Register)\n    },\n    {\n        to: \"/signout\",\n        exact: true,\n        component: withRequireAuthentication()(Logout)\n    },\n    {\n        to: \"/code\",\n        exact: true,\n        component: withRequireAuthentication(true)(Verify)\n    },\n    {\n        to: \"/tweet/:id\",\n        exact: true,\n        component: React.lazy(() => import(\"../components/views/ViewTweet\"))\n    },\n    {\n        to: \"/search\",\n        exact: true,\n        component: React.lazy(() => import(\"../components/views/Search\"))\n    },\n    {\n        to: \"/not-found\",\n        exact: true,\n        component: NotFound\n    }\n];\n\nexport default chirpRoutes;\n","import React from \"react\";\n\nimport TweetHome from \"./TweetHome\";\nimport LoadingFallback from \"../LoadingFallback\";\n\nimport useUser from \"../hooks/useUser\";\nimport { Link } from \"react-router-dom\";\n\nconst Home: React.FC = () => {\n    const { user: {\n        done, authenticated\n    } } = useUser();\n\n    if (done && authenticated) {\n        return (\n            <TweetHome />\n        );\n    }\n\n    if (done && !authenticated) {\n        return (\n            <div>\n                <h1>\n                    Welcome to Chirp!\n                </h1>\n                <div>\n                    <Link\n                        to=\"/signin\"\n                    >\n                        Returning? Sign in.\n                    </Link>\n                </div>\n                <div>\n                    <Link\n                        to=\"/signup\"\n                    >\n                        Create an account for free!\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <LoadingFallback />\n    );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport StorageProvider from \"./components/StorageProvider\";\nimport UserProvider from \"./components/UserProvider\";\nimport ChirpRouter from \"./components/ChirpRouter\";\nimport LoadingFallback from \"./components/LoadingFallback\";\n\nimport routes from \"./routes/chirp\";\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n    const renderFallback = () => (\n        <LoadingFallback />\n    );\n\n    return (\n        <BrowserRouter>\n            <StorageProvider>\n                <UserProvider>\n                    <React.Suspense\n                        fallback={ renderFallback() }\n                    >\n                        <ChirpRouter\n                            routes={ routes }\n                        />\n                    </React.Suspense>\n                </UserProvider>\n            </StorageProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import axios, { AxiosRequestConfig } from \"axios\";\n\nimport { APIResponse } from \"../models/api\";\n\nexport const api = async <P extends APIResponse>(\n    endpoint: string,\n    options: AxiosRequestConfig = {},\n    secure?: boolean\n) => {\n    const {\n        REACT_APP_API_HOST: HOST\n    } = process.env;\n\n    const protocol = secure\n        ? \"https\"\n        : \"http\";\n\n    return axios.request<P>({\n        url: `${protocol}://${HOST}${endpoint}`,\n        ...options\n    });\n};\n"],"sourceRoot":""}